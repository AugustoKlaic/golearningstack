// Code generated by MockGen. DO NOT EDIT.
// Source: learning_repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	entity "github.com/AugustoKlaic/golearningstack/pkg/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockLearningRepositoryInterface is a mock of LearningRepositoryInterface interface.
type MockLearningRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLearningRepositoryInterfaceMockRecorder
}

// MockLearningRepositoryInterfaceMockRecorder is the mock recorder for MockLearningRepositoryInterface.
type MockLearningRepositoryInterfaceMockRecorder struct {
	mock *MockLearningRepositoryInterface
}

// NewMockLearningRepositoryInterface creates a new mock instance.
func NewMockLearningRepositoryInterface(ctrl *gomock.Controller) *MockLearningRepositoryInterface {
	mock := &MockLearningRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockLearningRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLearningRepositoryInterface) EXPECT() *MockLearningRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockLearningRepositoryInterface) CreateMessage(message *entity.MessageEntity) (*entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", message)
	ret0, _ := ret[0].(*entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockLearningRepositoryInterfaceMockRecorder) CreateMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockLearningRepositoryInterface)(nil).CreateMessage), message)
}

// DeleteMessage mocks base method.
func (m *MockLearningRepositoryInterface) DeleteMessage(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockLearningRepositoryInterfaceMockRecorder) DeleteMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockLearningRepositoryInterface)(nil).DeleteMessage), id)
}

// FindAllMessages mocks base method.
func (m *MockLearningRepositoryInterface) FindAllMessages() ([]entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllMessages")
	ret0, _ := ret[0].([]entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllMessages indicates an expected call of FindAllMessages.
func (mr *MockLearningRepositoryInterfaceMockRecorder) FindAllMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllMessages", reflect.TypeOf((*MockLearningRepositoryInterface)(nil).FindAllMessages))
}

// GetMessage mocks base method.
func (m *MockLearningRepositoryInterface) GetMessage(id int) (*entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", id)
	ret0, _ := ret[0].(*entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockLearningRepositoryInterfaceMockRecorder) GetMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockLearningRepositoryInterface)(nil).GetMessage), id)
}

// UpdateMessage mocks base method.
func (m *MockLearningRepositoryInterface) UpdateMessage(message *entity.MessageEntity) (*entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", message)
	ret0, _ := ret[0].(*entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockLearningRepositoryInterfaceMockRecorder) UpdateMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockLearningRepositoryInterface)(nil).UpdateMessage), message)
}
