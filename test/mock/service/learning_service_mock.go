// Code generated by MockGen. DO NOT EDIT.
// Source: learning_service_interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	entity "github.com/AugustoKlaic/golearningstack/pkg/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockLearningServiceInterface is a mock of LearningServiceInterface interface.
type MockLearningServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLearningServiceInterfaceMockRecorder
}

// MockLearningServiceInterfaceMockRecorder is the mock recorder for MockLearningServiceInterface.
type MockLearningServiceInterfaceMockRecorder struct {
	mock *MockLearningServiceInterface
}

// NewMockLearningServiceInterface creates a new mock instance.
func NewMockLearningServiceInterface(ctrl *gomock.Controller) *MockLearningServiceInterface {
	mock := &MockLearningServiceInterface{ctrl: ctrl}
	mock.recorder = &MockLearningServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLearningServiceInterface) EXPECT() *MockLearningServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockLearningServiceInterface) CreateMessage(message *entity.MessageEntity) (*entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", message)
	ret0, _ := ret[0].(*entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockLearningServiceInterfaceMockRecorder) CreateMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockLearningServiceInterface)(nil).CreateMessage), message)
}

// DeleteMessage mocks base method.
func (m *MockLearningServiceInterface) DeleteMessage(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockLearningServiceInterfaceMockRecorder) DeleteMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockLearningServiceInterface)(nil).DeleteMessage), id)
}

// GetAllMessages mocks base method.
func (m *MockLearningServiceInterface) GetAllMessages() ([]entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages")
	ret0, _ := ret[0].([]entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages.
func (mr *MockLearningServiceInterfaceMockRecorder) GetAllMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockLearningServiceInterface)(nil).GetAllMessages))
}

// GetMessage mocks base method.
func (m *MockLearningServiceInterface) GetMessage(id int) (*entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", id)
	ret0, _ := ret[0].(*entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockLearningServiceInterfaceMockRecorder) GetMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockLearningServiceInterface)(nil).GetMessage), id)
}

// UpdateMessage mocks base method.
func (m *MockLearningServiceInterface) UpdateMessage(newMessage *entity.MessageEntity, id int) (*entity.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", newMessage, id)
	ret0, _ := ret[0].(*entity.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockLearningServiceInterfaceMockRecorder) UpdateMessage(newMessage, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockLearningServiceInterface)(nil).UpdateMessage), newMessage, id)
}
